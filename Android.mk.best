# Copyright 2005 The Android Open Source Project
#
# Android.mk for adb
#

LOCAL_PATH:= $(call my-dir)

adb_host_sanitize :=
adb_target_sanitize :=

adb_version := N-android

ADB_COMMON_CFLAGS := \
    -Wall -Wextra -Werror \
    -Wno-unused-parameter \
    -Wno-missing-field-initializers \
    -Wvla \
    '-DADB_REVISION="$(adb_version)"' \
    -DADB_HOST_ON_TARGET=1 \
    -fpermissive \
    -std=gnu++14  \
    -DALLOW_ADBD_ROOT=1 

ADB_COMMON_linux_CFLAGS := \
    -std=gnu++14 \


CFLAGS += \
	-DHAVE_SYS_UIO_H \
	-DHAVE_PTHREADS \
	-DHAVE_SCHED_H \
	-DHAVE_SYS_UIO_H \
	-DHAVE_IOCTL \
	-DHAVE_TM_GMTOFF \
	-DANDROID_SMP=1  \
	-DHAVE_ENDIAN_H \
	-DHAVE_POSIX_FILEMAP \
	-DHAVE_OFF64_T \
	-Wno-format-y2k \
	-DHAVE_ENDIAN_H \
	-DHAVE_SCHED_H \
 -DHAVE_LITTLE_ENDIAN_H \
 -D__ANDROID__ \
 -DHAVE_ANDROID_OS \
 -D_ANDROID_CONFIG_H \
 -D_BYPASS_DSO_ERROR \

CFLAGS += -DANDROID -DARM
CFLAGS += -D_GNU_SOURCE=1 -D_POSIX_SOURCE=1 
CFLAGS += -DSIZEOF_LONG=4
CFLAGS += -Iframeworks/native/include 

CFLAGS += \
    -Wall \
    -Wwrite-strings \
    -Wsign-compare \
    -Wno-missing-field-initializers \
    -Wno-unused-parameter \
    -Wno-sign-compare 

CFLAGS += -DARM=1
CFLAGS += -O2  -fPIC -static -D_GNU_SOURCE -g

aoptCppFlags += -DHAVE_FORKEXEC=1
aoptHostLdLibs := -lc -lgcc -ldl -lz -lstdc++

APP_STL := libc++_static
LOCAL_CXX_STL := libc++_static

LOCAL_C_INCLUDES := \
        $(LOCAL_PATH)/include \
        system/core/base/include \
        system/core/libutils \
        system/core/include \
        system/core/liblog \
        system/core/libcutils \
        system/core/libcrypto_utils/include \
        system/core/libcrypto_utils \
        external/boringssl/src/include \
        external/boringssl/src/include/crypto \
        external/libpng \
        external/expat \
        external/zlib \
        external/gnu-libstdc++/4.9/libs/armeabi-v7a/include \
        bionic/libc/include \
        system/core/libziparchive \
        frameworks/base/lib/androidfw \
        external/gnu-libstdc++/4.9/include \

LOCAL_EXPORT_C_INCLUDES += $(LOCAL_C_INCLUDES) 

ADB_STATIC_LIBRARIES := \
    libadbn \
    libbase_static \
    libcrypto_static \
    libcrypto_utils_static \
    libcutils \
    liblog \
    libutils \
    libziparchive \
    libc \
    libz \

# libadb
# =========================================================
include $(CLEAR_VARS) 
# Much of adb is duplicated in bootable/recovery/minadb and fastboot. Changes
# made to adb rarely get ported to the other two, so the trees have diverged a
# bit. We'd like to stop this because it is a maintenance nightmare, but the
# divergence makes this difficult to do all at once. For now, we will start
# small by moving common files into a static library. Hopefully some day we can
# get enough of adb in here that we no longer need minadb. https://b/17626262
LIBADB_SRC_FILES := \
    adb.cpp \
    adb_auth.cpp \
    adb_io.cpp \
    adb_listeners.cpp \
    adb_trace.cpp \
    adb_utils.cpp \
    fdevent.cpp \
    sockets.cpp \
    transport.cpp \
    transport_usb.cpp \

LIBADB_TEST_SRCS := \
    adb_io_test.cpp \
    adb_listeners_test.cpp \
    adb_utils_test.cpp \
    fdevent_test.cpp \
    socket_test.cpp \
    sysdeps_test.cpp \
    transport_test.cpp \

LIBADB_CFLAGS := \
    $(ADB_COMMON_CFLAGS) \
    -fvisibility=hidden \
    -D_GNU_SOURCE \
    -DADB_HOST=0 \
    -DADB_HOST_ON_TARGET=1 


LIBADB_linux_CFLAGS := \
    $(ADB_COMMON_linux_CFLAGS) \

LIBADB_darwin_CFLAGS := \
    $(ADB_COMMON_darwin_CFLAGS) \

LIBADB_windows_CFLAGS := \
    $(ADB_COMMON_windows_CFLAGS) \

LIBADB_darwin_SRC_FILES := \
    get_my_path_darwin.cpp \
    sysdeps_unix.cpp \
    usb_osx.cpp \

LIBADB_linux_SRC_FILES := \
    get_my_path_linux.cpp \
    sysdeps_unix.cpp \
    usb_linux.cpp \

LIBADB_windows_SRC_FILES := \
    sysdeps_win32.cpp \
    usb_windows.cpp \

LIBADB_TEST_windows_SRCS := \
    sysdeps_win32_test.cpp \


LOCAL_CLANG := false
LOCAL_MODULE := libadbn
LOCAL_CFLAGS := \
    $(LIBADB_CFLAGS) \
    $(ADB_COMMON_CFLAGS) \
    -D_GNU_SOURCE \
    -DADB_HOST=0 \
    -DADB_HOST_ON_TARGET=1 \
    -I$(LOCAL_C_INCLUDES) \
    -D__ANDROID__ \
    -DHAVE_ANDROID_OS

LOCAL_SRC_FILES := \
    $(LIBADB_SRC_FILES) \
    $(LIBADB_linux_SRC_FILES) \
    adb_auth_host.cpp \
    

LOCAL_C_INCLUDES := \
        $(LOCAL_PATH)/include \
        system/core/base/include \
        system/core/libutils \
        system/core/include \
        system/core/liblog \
        system/core/libcutils \
        system/core/libcrypto_utils/include \
        system/core/libcrypto_utils \
        external/boringssl/src/include \
        external/boringssl/src/include/crypto \
        external/libpng \
        external/expat \
        external/zlib \
        external/gnu-libstdc++/4.9/libs/armeabi-v7a/include \
        bionic/libc/include \
        system/core/libziparchive \
        frameworks/base/lib/androidfw \
        external/gnu-libstdc++/4.9/include \
        external/gnu-libstdc++/4.9/arm-linux-androideabi

# Even though we're building a static library (and thus there's no link step for
# this to take effect), this adds the includes to our path.
LOCAL_LDLIBS := -lc -lgcc -ldl -lz -lstdc++ -lgnustl_static

LOCAL_STATIC_LIBRARIES := \
    libbase \
    libcrypto_static \
    libcrypto_utils_static 

include $(BUILD_STATIC_LIBRARY)
 



# adb host tool
# =========================================================
include $(CLEAR_VARS)

#LOCAL_CXX_STL := libc++
ifeq ($(HOST_OS),linux)
  LOCAL_LDLIBS += -lc -lgcc -ldl -lz -lstdc++ -lgnustl_static 
  LOCAL_CFLAGS += -DWORKAROUND_BUG6558362
endif
LOCAL_CXX_STL := libc++

ifeq ($(HOST_OS),windows)
  LOCAL_LDLIBS += -lws2_32 -lgdi32
  EXTRA_STATIC_LIBS := AdbWinApi
endif

LOCAL_SRC_FILES := \
   adb_client.cpp \
   client/main.cpp \
   console.cpp \
   commandline.cpp \
   file_sync_client.cpp \
   line_printer.cpp \
   services.cpp \
   shell_service_protocol.cpp \

LOCAL_MODULE := adb
LOCAL_MODULE_TAGS := debug


LOCAL_CFLAGS += \
    $(ADB_COMMON_CFLAGS) \
    -D_GNU_SOURCE \
    -DADB_HOST=1 \
    -fvisibility=hidden \
    $(ADB_COMMON_linux_CFLAGS) \
    -DHAVE_MACROS \
    -fPIC \
    -DHAVE_ANDROID_OS=1 \
    -D__ANDROID__ \
    -D_GNU_SOURCE \
    -D__USE_BSD \
    -DADB_HOST_ON_TARGET=1 \
    -DALLOW_ADBD_ROOT=1 \
    $(CFLAGS) \
    -DADB_HOST_ON_TARGET=1 \
    -I$(LOCAL_C_INCLUDES) 

# Don't add anything here, we don't want additional 
LOCAL_LDLIBS := -lc -lgcc -ldl -lz -lstdc++ -lgnustl_static
LOCAL_MODULE_TAGS := optional 
LOCAL_LDFLAGS += \
-static -Wl,-rpath-link=/data/toolchain/sysroot/usr/lib/ \
-dynamic-linker,/system/bin/linker \
-L/data/toolchain/sysroot/usr/lib/crtend_android.o \
-L/data/toolchain/sysroot/usr/lib/libandroid.so \
-L/data/toolchain/sysroot/usr/lib/libc.so \
-L/data/toolchain/sysroot/usr/lib/crtbegin_dynamic.o \
-L/data/toolchain/sysroot/usr/lib \
-L/data/toolchain/sysroot/usr/lib/libc.so. \
-L/data/toolchain/lib \
-L/data/toolchain/lib/libdl.so
LOCAL_STATIC_LIBRARIES := $(ADB_STATIC_LIBRARIES) 
LOCAL_FORCE_STATIC_EXECUTABLE := true
LOCAL_MODULE_PATH := $(TARGET_ROOT_OUT)/sbin
LOCAL_UNSTRIPPED_PATH := $(TARGET_ROOT_OUT_UNSTRIPPED)
include $(BUILD_EXECUTABLE)
